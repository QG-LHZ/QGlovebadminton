1.二分查找
输入一个整数 n 和 n 个整数，保证这 n 个整数已经按照从小到大进行排序。

然后输入一个整数 q （ q≤100000 ）代表 q 次查询。接下来 q 行，每行含有一个整数 m ，代表一次查询。对于每次查询，使用二分查找判断 m 是否在之前输入的 n 个整数中出现过。如果出现，输出一行 "Yes" ，否则输出 "No" 。

Input
第一行：一个整数 n （ n≤100000 ）。
接下来 n 行，每行一个整数 ai （ 1≤ai≤ ）。
接下来一行，一个整数 q 。
接下来 qq 行，每行输入一个整数 xx （ 1≤x≤ ）。

Output
q 行字符串，每行为" Yes" 或" No" 。



 

思路

这一题是二分法基础，可以直接用二分法模板。

代码

#include<stdio.h>
void er(int a[], int n, int ans) {
	int l, r, mid, f;
	l = 1, r = n, f = 0;
	while (l <= r) {
		mid = (l + r) / 2;
		if (a[mid] == ans) {
			printf("Yes\n");
			f++;
			break;
		}
		else if (a[mid] > ans) {
			r = mid - 1;
		}
		else l = mid + 1;
	}
	if(f==0)printf("No\n");
}
int main() {
	int n, i, q;
	scanf("%d", &n);
	int a[100001];
	for (i = 1;i <= n;i++) {
		scanf("%d", &a[i]);
	}
	scanf("%d", &q);
	int s[100000];
	for (i = 0;i < q;i++) {
		scanf("%d", &s[i]);
	}
	for (i = 0;i < q;i++) {
		er(a, n, s[i]);
	}
}

 
 2.A-B 数对
Description
给出一串正整数数列以及一个正整数 C，要求计算出所有满足 A−B=C 的数对的个数（不同位置的数字一样的数对算不同的数对）。

Input
输入共两行。

第一行，两个正整数 N,C。

第二行，N 个正整数，作为要求处理的那串数。

Output
一行，表示该串正整数中包含的满足 A−B=C 的数对的个数。

Sample 1
Input	Output
4 1
1 1 2 3
3
Hint
对于 75% 的数据，1≤N≤2000。

对于 100% 的数据，1≤N≤2×，0≤ai<，1≤C<。

思路

如果我们将数列排序，显然数值相同的数会相邻排布，类似 1,2,2,2,3,5 中的2。

知道数列中A的值多少个，那么就要找到第一个A的位置，和最后一个A的位置。

（备注：该题思路及代码并非作者原创，作者能力有限，有参考其他材料）

代码

#include<bits/stdc++.h>
#define int long long
using namespace std;
 
const int N=2e5;
int a[N+5],n,C,ans=0;
 
int FindL(int L,int R,int A)
{	
	for(int mid=L+R>>1;L<R;a[mid]<A?L=mid+1:R=mid)mid=L+R>>1;
	
	return L;
}
 
int FindR(int L,int R,int A)
{		
	for(int mid=L+R+1>>1;L<R;a[mid]>A?R=mid-1:L=mid)mid=L+R+1>>1;	
		
	return L;
}
 
void Kafka()
{
	cin>>n>>C;
	for(int i=1;i<=n;++i) cin>>a[i];	
	sort(a+1,a+1+n);
	for(int i=1;i<n;++i)
	{
		int A=a[i]+C;
		int L=FindL(i+1,n,A),R;
		if(a[L]!=A) continue;
		R=FindR(i+1,n,A);
		ans+=R-L+1;
	}
	cout<<ans<<'\n';
}
 
signed main()
{
	Kafka();
	return 0;
}
3.分巧克力
Description
儿童节那天有 K 位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。

小明一共有 N 块巧克力，其中第 i 块是 Hi×Wi 的方格组成的长方形。

为了公平起见，小明需要从这 N 块巧克力中切出 K 块巧克力分给小朋友们。切出的巧克力需要满足：

形状是正方形，边长是整数。

大小相同。

例如一块 6×5 的巧克力可以切出 6 块 2×2 的巧克力或者 2 块 3×3 的巧克力。

当然小朋友们都希望得到的巧克力尽可能大，你能帮小 Hi​ 计算出最大的边长是多少么？

Input
第一行包含两个整数 N 和 K。(1≤N,K≤)。

以下 N 行每行包含两个整数 Hi​ 和 Wi​。(1≤Hi,Wi≤)。

输入保证每位小朋友至少能获得一块 1×1 的巧克力。

Output
输出切出的正方形巧克力最大可能的边长。


Hint
蓝桥杯 2022 省赛 A 组 I 题。

思路

先确定最大巧克力的边长的范围是（1，100000），我们假设已经知道边长为ans，将其带进check函数，检查是否能切出至少k块的以ans为边长的巧克力，若不能，则用二分法，缩小ans的值，直至找到。若能，则用二分法扩大ans，尝试找到更大的巧克力。

代码

#include<stdio.h>
 
#define MAX 100005
 
int n,k,a[MAX],s[MAX];
 
// 检查以 mid 为边长是否能切出至少 k 块正方形巧克力
int check(int mid){
	int cnt=0,i;
	for(i=1;i<=n;i++){
		// 计算第 i 块巧克力能切出边长为 mid 的正方形巧克力的数量
		cnt+=(a[i]/mid)*(s[i]/mid);
	}
	return cnt>=k;
}
int main(){
	int i,r=100000,l=1,ans;
	scanf("%d%d",&n,&k); 
	for(i=1;i<=n;i++){
		scanf("%d%d",&a[i],&s[i]);
	}
	while(r>=l){
		int mid=(l+r)/2;
		if(check(mid)){
			ans=mid;
			l=mid+1;
		}
		else r=mid-1;
	}
	printf("%d",ans);
}

 
 4.卡牌
Description
这天，小明在整理他的卡牌。

他一共有 n 种卡牌，第 i 种卡牌上印有正整数数 i(i∈[1,n]), 且第 i 种卡牌现有 ai​ 张。

而如果有 n 张卡牌，其中每种卡牌各一张，那么这 n 张卡牌可以被称为一套牌。小明为了凑出尽可能多套牌，拿出了 m 张空白牌, 他可以在上面写上数 i，将其当做第 i 种牌来凑出套牌。然而小明觉得手写的牌不太美观，决定第 i 种牌最多手写 bi​ 张。

请问小明最多能凑出多少套牌?

Input
输入共 3 行，第一行为两个正整数 n，m 。

第二行为 n 个正整数 a1,a2,…,an​ 。

第三行为 n 个正整数 b1,b2,…,bn​ 。

Output
一行，一个整数表示答案。


Hint
【样例说明】

这 5 张空白牌中，拿 2 张写 1，拿 1 张写 2，这样每种牌的牌数就变为了 3,3,3,4，可以凑出 3 套牌，剩下 2 张空白牌不能再帮助小明凑出一套。

【评测用例规模与约定】

对于 30% 的数据，保证 n≤2000;

对于 100% 的数据，保证 n ≤ 2×; ai,bi ≤ n; m ≤  。

蓝桥杯 2022 国赛 B 组 C 题。

思路

先写出check函数，检查是否可以凑出mid套卡牌。

然后锁定mid的左右边界，使用二分法查出mid的最大值。

最后，注意！由于数据很大，该题要用long long！

代码

#include<stdio.h>
 
#define MAX 1000000
 
long long n,m;
long long a[MAX],b[MAX];
 
//检查是否能凑出mid套卡牌。 
long long check(long long mid){
	long long cnt=0;
	for(long long i=0;i<n;i++){
		if(a[i]<mid){
			if((mid-a[i])>b[i])return 0;//超出bi的限制则返回0. 
			else cnt+=mid-a[i];
		}
	}
	return cnt<=m;//判断凑出mid套卡牌需要用的空白牌是否大于自己拥有的空白牌。 
}
 
int main(){
	long long i;
	scanf("%lld%lld",&n,&m);
	for(i=0;i<n;i++){
		scanf("%lld",&a[i]);
	}
	for(i=0;i<n;i++){
		scanf("%lld",&b[i]);
	}
	long long l=0,r=1000000,ans=0;
	while(l<=r){
		long long mid=(l+r)/2;
		if(check(mid)){
			ans=mid;l=mid+1;
		} 
		else {
		r=mid-1;}
	}
	printf("%lld",ans);
}
 

5.书的复制
Background
大多数人的错误原因：尽可能让前面的人少抄写，如果前几个人可以不写则不写，对应的人输出 

0 0 。

不过，已经修改数据，保证每个人都有活可干。

Description
现在要把 m 本有顺序的书分给 k 个人复制（抄写），每一个人的抄写速度都一样，一本书不允许给两个（或以上）的人抄写，分给每一个人的书，必须是连续的，比如不能把第一、第三、第四本书给同一个人抄写。

现在请你设计一种方案，使得复制时间最短。复制时间为抄写页数最多的人用去的时间。

Input
第一行两个整数 m,k。

第二行 m 个整数，第 i 个整数表示第 i 本书的页数。

Output
共 k 行，每行两个整数，第 i 行表示第 i 个人抄写的书的起始编号和终止编号。 k 行的起始编号应该从小到大排列，如果有多解，则尽可能让前面的人少抄写。

Sample 1
Input	Output
9 3
1 2 3 4 5 6 7 8 9
1 5
6 7
8 9
Hint
1≤k≤m≤500。

思路

分步进行。

首先，我们假设已经知道复制的最短时间为mid，然后编写check函数，求出用mid时间需要的抄写人数是否不大于k。

然后用二分法查找最短复制时间。

接着根据最短时间进行分配。

代码

#include <stdio.h>
 
#define MAX 505
 
int m,k;
int a[MAX];
int z[MAX],x[MAX];
 
// 检查是否能在 mid 时间内完成分配
int check(int mid){
	int i,t=0,ant=1;
	for(i=0;i<m;i++){
		if(t+a[i]>mid){
			ant++;
			t=a[i];
		}
		else {
			t+=a[i];
		}
	}
	return ant<=k;
} 
 
// 二分查找最短复制时间
int work(){
	int l=0,r=0,i,ans;
	for(i=0;i<m;i++){
		r+=a[i];
		if(l<a[i])l=a[i]; 
	}
	while(l<=r){
		int mid=(l+r)/2;
		if(check(mid)){
			ans=mid;r=mid-1;
		}
		else {
			l=mid+1;
		}
	}
	return ans;
}
 
// 根据最短时间进行分配
void dis(int ans){
	int i,t=0,p=k;
	for(i=m-1;i>=0;i--){
		if(t+a[i]>ans||i+1<p){
			z[p-1]=i+2;
			p--;
			t=a[i];
		}
		else {
			t+=a[i];
		}
	}
	for(i=0;i<k-1;i++)x[i]=z[i+1]-1;
	x[k-1]=m,z[0]=1;
}
 
int main(){
	scanf("%d%d",&m,&k);
	int i,ans;
	for(i=0;i<m;i++){
		scanf("%d",&a[i]);
	}
	ans=work();
	dis(ans);
	for(i=0;i<k;i++){
		printf("%d %d\n",z[i],x[i]);
	}
}

 

6.青蛙过河
Description
小青蛙住在一条河边，它想到河对岸的学校去学习。小青蛙打算经过河里的石头跳到对岸。

河里的石头排成了一条直线，小青蛙每次跳跃必须落在一块石头或者岸上。不过，每块石头有一个高度，每次小青蛙从一块石头起跳，这块石头的高度就会下降11，当石头的高度下降到 0 时小青蛙不能再跳到这块石头上（某次跳跃后使石头高度下降到 0 是允许的)。

小青蛙一共需要去学校上 x 天课，所以它需要往返 2x 次。当小青蛙具有一个跳跃能力 y 时，它能跳不超过 y 的距离。

请问小青蛙的跳跃能力至少是多少才能用这些石头上完 x 次课。

Input
输入的第一行包含两个整数 n,x, 分别表示河的宽度和小青蛙需要去学校的天数。请注意 2x 才是实际过河的次数。

第二行包含 n−1 个非负整数 H1,H2,⋯ ,Hn−1, 其中 Hi​>0 表示在河中与 小青蛙的家相距 i 的地方有一块高度为 Hi​ 的石头，Hi​=0 表示这个位置没有石头。

Output
输出一行, 包含一个整数, 表示小青蛙需要的最低跳跃能力。

Hint
【样例解释】

由于只有两块高度为 1 的石头，所以往返只能各用一块。第 1 块石头和对岸的距离为 4，如果小青蛙的跳跃能力为 3 则无法满足要求。所以小青蛙最少需要 4 的跳跃能力。

【评测用例规模与约定】

对于 30% 的评测用例，n≤100;

对于 60% 的评测用例，n≤1000;

对于所有评测用例，1≤n≤,1≤x≤,0≤Hi≤ 。

蓝桥杯 2022 省赛 A 组 F 题。

思路

显然，一只小青蛙往返 x 次等价于 2*x 只小青蛙跳完单程一次，我们完全可以当作 2*x 只小青蛙一起跳。

我们先安排所有小青蛙跳到 [1,y] 区间中，且尽可能靠右，由于我们的前提“数列 H_i中，每个长度为 y 连续子序列的和至少为 2*x”，所有小青蛙一定能进入 [1,y] 区间中。

然后，我们尝试把所有小青蛙安排到 [2,y+1] 区间中，还是由于我们的前提“数列 H_i中，每个长度为 y 连续子序列的和至少为 2*x”，所有小青蛙一定能进入 [2,y+1] 区间中。

以此类推，那么所有小青蛙就一定能过岸。

综上，y 合法的充要条件就是“数列 H_i 中，所有长度为 y 的子区间和大于等于 2*x”，检验这个条件即可，这里面的涉及关于“区间和”的操作，可以用双指针或前缀和的方法。

（备注：该题思路及代码并非作者原创，作者能力有限，有参考其他材料）

代码

#include<bits/stdc++.h>
using namespace std;
const int N=1e5;
int n,x,H[N+5],sum[N+5];
inline int read()
{
	int x=0;bool f=1;char ch=getchar();
	for(;ch<'0'||ch>'9';ch=getchar())f^=(ch=='-');
	for(;ch>='0'&&ch<='9';ch=getchar())x=(x<<1)+(x<<3)+(ch^48);
	return f?x:-x;
}
bool check(int mid)
{
	for(int i=1;i+mid-1<n;++i) 
	{
		int L=i,R=i+mid-1;
		if(sum[R]-sum[L-1]<2*x) return 0;
	}
	return 1;
}
void Kafka()
{
	n=read(),x=read();
	for(int i=1;i<n;++i) H[i]=read();
	for(int i=1;i<n;++i) sum[i]=H[i]+sum[i-1];
	
	int L=1,R=n;
	for(int mid=L+R>>1;L<R;check(mid)?R=mid:L=mid+1)mid=L+R>>1;
	
	cout<<L<<'\n';
}
signed main()
{
	Kafka();
	return 0;
}

专题总结
这一专题与第一讲相比，难度有明显提升，主要是要对二分法有一个透彻的了解。

其中我个人认为第3、4、5题是比较经典的二分法题目，值得我们加以揣摩。

第6题难度偏高，其中的做题思路还须多总结思考。
————————————————

                            版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
                        
原文链接：https://blog.csdn.net/2401_88980407/article/details/145367736
